import React, { Component, useEffect, useState } from 'react';
import {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';

export class MapContainer extends Component {

    state = {
      showingInfoWindow: false,
      activeMarker: {},
      selectedPlace: {},
      destination: "",
      mapCenter: {
          lat: 25.674227497365834,
          lng: -80.39446040249253
      }
    };

    getDirections = async (destination) => { 
        try{
            let setDestination = ""
            for(let i=0; i < destination.length; i++){
                if(destination[i] === " "){
                    setDestination += "+";
                }else{
                    setDestination += destination[i];
                }
            }
            const directions = `https://maps.googleapis.com/maps/api/directions/json?origin=` + process.env.REACT_APP_DIRECTION_ORIGIN + `&destination=` + setDestination + `&key=`+ process.env.REACT_APP_GOOGLE_BOOKS_PUBLIC;
        }catch(err){
            console.log(err);
        }
    };
   
    onMarkerClick = (props, marker, e) =>
      this.setState({
        selectedPlace: props,
        activeMarker: marker,
        showingInfoWindow: true
      });
   
    onMapClicked = (props) => {
      if (this.state.showingInfoWindow) {
        this.setState({
          showingInfoWindow: false,
          activeMarker: null
        })
      }
    };
   
    render() {

        const containerStyle = {
            position: 'relative',  
            width: '100%',
            height: '100%'
        }

        // const directionsService = new google.maps.DirectionsService();
        // const origin = { lat: 40.756795, lng: -73.954298 };
        // const destination = { lat: 41.756795, lng: -78.954298 };

      return (
        <div className="map-modal-container">
            <div className="map-directions-container">
                <div className="map-direction-div">
                    <label>Destination</label>
                    <input onChange={e => this.destination = e.target.value} type="text"/>
                    <button onClick={e => this.getDirections(this.destination)}>Get Directions</button>
                </div>
            </div>
            <Map 
                google={this.props.google}
                containerStyle={containerStyle}
                initialCenter={{
                    lat: this.state.mapCenter.lat,
                    lng: this.state.mapCenter.lng
                }}
                center={{
                    lat: this.state.mapCenter.lat,
                    lng: this.state.mapCenter.lng
                }}
                onClick={this.onMapClicked}>

                <Marker
                    position={{
                        lat: this.state.mapCenter.lat,
                        lng: this.state.mapCenter.lng
                    }}
                    onClick={this.onMarkerClick}
                    // name={'Current location'} 
                />
    
            {/* <InfoWindow
                marker={this.state.activeMarker}
                visible={this.state.showingInfoWindow}>
                <div>
                    <h1>{this.state.selectedPlace.name}</h1>
                </div>
            </InfoWindow> */}
            </Map>
        </div>
      )
    }
  }

  export default GoogleApiWrapper({
    apiKey: (process.env.REACT_APP_GOOGLE_BOOKS_PUBLIC)
  })(MapContainer)

  import React, { Component } from "react";
import { Map, InfoWindow, Marker, GoogleApiWrapper } from "google-maps-react";

export class MapContainer extends Component {

    state = {
        showingInfoWindow: false,
        activeMarker: {},
        selectedPlace: {},
        destination: "",
        mapCenter: {
            lat: 25.674227497365834,
            lng: -80.39446040249253
        }
    };

    getDirections = async (destination) => { 
        try{

            this.setState({
                destination: destination
            });

        }catch(err){
            console.log(err);
        }
    };
    
    // onMarkerClick = (props, marker, e) =>{
    //     this.setState({
    //         selectedPlace: props,
    //         activeMarker: marker,
    //         showingInfoWindow: true
    //     });
    // }
    
    // onMapClicked = (props) => {
    //     if (this.state.showingInfoWindow) {
    //         this.setState({
    //             showingInfoWindow: false,
    //             activeMarker: null
    //         })
    //     }
    // };

    onMapReady = (mapProps, map) => {

        let coords = [];
        let waypoints = [];

        //instantiate directions service and directions renderer
        const directionsService = new window.google.maps.DirectionsService();
        const directionsDisplay = new window.google.maps.DirectionsRenderer();
        //put directions renderer to render in the map
        directionsDisplay.setMap(map);
        //Getting the first coordinate in the array as the start/origin
        let start = { lat: this.state.mapCenter.lat, lng: this.state.mapCenter.lng };
        //Getting the last coordinate in the array as the end/destination
        let input = document.getElementById("pac-input");
        console.log(input.value)
        let end = input.value;
    
        //putting all the coordinates between the first and last coordinate from the array as the waypoints
        for (let i = 1; i < coords.length - 1; i++) {
            waypoints.push({
                location: { lat: coords[i].lat, lng: coords[i].lng },
                stopover: true,
            });
        }

        // directions requests
        let request = {
            origin: start,
            waypoints: waypoints,
            destination: end,
            travelMode: "DRIVING",
        };

        //show results in the directionsrenderer
        directionsService.route(request, function (result, status) {
            if (status == "OK") {
                directionsDisplay.setDirections(result);
            }
        });

        //setting the autocomplete input
        // let card = document.getElementById("pac-card");
        // map.controls[window.google.maps.ControlPosition.TOP_RIGHT].push(card);
        let autocomplete = new window.google.maps.places.Autocomplete(input);

        // Bind the map's bounds (viewport) property to the autocomplete object,
        // so that the autocomplete requests use the current map bounds for the
        // bounds option in the request.
        autocomplete.bindTo("bounds", map);

        // Set the data fields to return when the user selects a place.
        autocomplete.setFields(["address_components", "geometry", "icon", "name"]);

        //listener for the places input
        autocomplete.addListener("place_changed", function () {

            let place = autocomplete.getPlace();
            if (!place.geometry) {
                // User entered the name of a Place that was not suggested and
                // pressed the Enter key, or the Place Details request failed.
                window.alert("No details available for input: '" + place.name + "'");
                return;
            }
      
            //Putting the previous last coordinate in the array to be part of the waypoint
            // waypoints.push({
            //     location: {
            //         lat: coords[coords.length - 1].lat,
            //         lng: coords[coords.length - 1].lng,
            //     },
            //     stopover: true,
            // });

            //putting the Place Autocomplete coordinate result in the coords array
            // coords.push({
            //     lat: place.geometry.location.lat(),
            //     lng: place.geometry.location.lng(),
            // });

            //putting the Place Autocomplete coordinate result the value of the end/destination
            end = place.geometry.location;
      
            //changing  request
            request = {
                origin: start,
                waypoints: waypoints,
                destination: end,
                travelMode: "DRIVING",
            };

            //creating new directions request
            directionsService.route(request, function (result, status) {
                if (status == "OK") {
                    directionsDisplay.setDirections(result);
                }
            });
        });
    };

    render() {

        const containerStyle = {
            position: 'relative',  
            width: '100%',
            height: '100%'
        }

        return (
            <div className="map-modal-container">
                <div className="map-directions-container">
                    <div className="map-direction-div">
                        <label>Destination</label>
                        <input id="pac-input" onChange={e => this.destination = e.target.value} type="text"/>
                        <button onClick={e => this.getDirections(this.destination)}>Get Directions</button>
                    </div>
                </div>
                <Map
                    initialCenter={this.state.mapCenter}
                    google={this.props.google}
                    onClick={this.onMapClicked}
                    onReady={this.onMapReady}
                    containerStyle={containerStyle}
                ></Map>
                <div className="pac-card" id="pac-card">
                    <div>
                        <div id="title">Add new point</div>
                        <div id="pac-container">
                            <input
                                id="pac-input"
                                type="text"
                                placeholder="Enter a location"
                            />
                        </div>
                    </div>
                </div>
                {/* <div style={{ width: 500, height: 500 }} id={this.props.id} />
                <div id="infowindow-content">
                    <img src="" width="16" height="16" id="place-icon" />
                    <span id="place-name" className="title"></span>
                    <br />
                    <span id="place-address"></span>
                    <br />
                    <span id="place-coord"></span>
                </div> */}
            </div>
        )
    }
}

export default GoogleApiWrapper({
    apiKey: (process.env.REACT_APP_GOOGLE_BOOKS_PUBLIC)
})(MapContainer)